*plugin.txt*
                                                                      *plugin*

==============================================================================
CONTENTS                                                     *plugin-contents*
  1. Commands................................................|plugin-commands|

==============================================================================
COMMANDS                                                     *plugin-commands*

:PyOut                                                                *:PyOut*
  ============================================================================
  == VIM_PY3_RST                                                   *vim-py3*
  *vim_py3*

  Since Vim has Python 3 embedded one can use all of Python directly from
  within Vim. This allows to immediately run and thus test code you write.

  These mappings apply either to the visual area (can also be within one line)
  or the current line.

  `<leader>jj`: evaluate and print

    If there is a `__pyout__` buffer (`:PyOut` or `<leader>jw`),   then
  printing goes to that buffer.

  `<leader>jk`: only evaluate

  `<leader>je`: expand bottle `SimpleTemplate`

  `<leader>jd`: evaluate the python `doctest` in the visual range

  `<leader>jt`: profile the selected code using `timeit` (within a `.py` file)

  `return`, `yield`, ... are skipped, if evaluating only one line.

  Evaluation of commented code:

    If the visual selection starts with a comment char,   the block is trimmed
  beyond the comment char before evaluation.

    This allows to evaluate commented code, but for   mixed comments and code,
  the first line must not be a comment.   It can be an empty line.

    ` >#.%,\\t` are comment chars.



:U                                                                        *:U*
  Title

  Title underline within one `.rest` must be consistent.

  `<leader>ehx`

  with `xâˆˆ{1,..,f}` helps keep the consistency. See `title_some` in
  `rstdoc.retable`.

:Ck                                                                      *:Ck*
  Keyword Lines

  The function `yield_with_kw` (in
  https://github.com/rpuntaie/rstdoc/blob/master/rstdoc/dcx.py) sees a RST
  comment of shape::

    .. {kw1,kw2,...}

  as a keyword line. Such lines can be searched with

  `:Ck` lists keyword lines of current file, containing the words provided as
    args
  `:CK` lists keyword lines in all rst and py files under current dir,
    containing the words provided as args

  If no args are given in the command line, then the words in the current line
  are used as args.

  `:Cp` goes to the previous such keyword line and
  `:Cn` to the next one.


vim:tw=78:ts=8:ft=help:norl:
